<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.github.baifangkual</groupId>
    <artifactId>bfk-j</artifactId>
    <version>0.1.0</version>
    <packaging>pom</packaging>

    <name>bfk-j</name>
    <description>bfk java project</description>
    <url>https://github.com/baifangkual/bfk-j</url>
    <scm>
        <connection>scm:git:git://github.com/baifangkual/bfk-j.git</connection>
        <developerConnection>scm:git:ssh://github.com/baifangkual/bfk-j.git</developerConnection>
        <url>https://github.com/baifangkual/bfk-j</url>
    </scm>
    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0</url>
        </license>
    </licenses>
    <developers>
        <developer>
            <name>bfk</name>
            <email>baifangkuai@live.com</email>
            <organizationUrl>https://github.com/baifangkual</organizationUrl>
        </developer>
    </developers>

    <modules>
        <module>jlib-core</module>
        <module>jlib-vfs</module>
        <module>jlib-db</module>
    </modules>

    <properties>
        <!-- properties setting -->
        <java.version>17</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <reset.resource.delimiter>@</reset.resource.delimiter>
        <!-- dep package reversion init -->
        <reversion.central-publishing-maven-plugin>0.7.0</reversion.central-publishing-maven-plugin>
        <reversion.maven-gpg-plugin>3.0.1</reversion.maven-gpg-plugin>
        <reversion.maven-source-plugin>3.3.1</reversion.maven-source-plugin>
        <reversion.maven-javadoc-plugin>3.3.2</reversion.maven-javadoc-plugin>
        <reversion.maven-compiler-plugin>3.11.0</reversion.maven-compiler-plugin>
        <reversion.maven-resources-plugin>3.3.1</reversion.maven-resources-plugin>
        <reversion.maven-assembly-plugin>3.6.0</reversion.maven-assembly-plugin>
        <reversion.maven-shade-plugin>3.5.3</reversion.maven-shade-plugin>
        <reversion.lombok>1.18.32</reversion.lombok>
        <reversion.slf4j-api>2.0.13</reversion.slf4j-api>
        <reversion.slf4j-simple>2.0.13</reversion.slf4j-simple>
        <reversion.jackson>2.17.2</reversion.jackson>
        <reversion.jupiter-api>5.10.2</reversion.jupiter-api>
        <reversion.auto-service>1.1.1</reversion.auto-service> <!-- THIS USE TO SPI FILE AUTO GEN -->
        <!-- boot 与 cloud 版本有兼容性对应关系 -->
        <reversion.spring-boot-dependencies>3.2.7</reversion.spring-boot-dependencies>
        <reversion.spring-cloud-dependencies>2023.0.3</reversion.spring-cloud-dependencies>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!--            <dependency>-->
            <!--                <groupId>org.springframework.boot</groupId>-->
            <!--                <artifactId>spring-boot-dependencies</artifactId>-->
            <!--                <version>${reversion.spring-boot-dependencies}</version>-->
            <!--                <scope>import</scope>-->
            <!--                <type>pom</type>-->
            <!--            </dependency>-->
            <!--            <dependency>-->
            <!--                <groupId>org.springframework.cloud</groupId>-->
            <!--                <artifactId>spring-cloud-dependencies</artifactId>-->
            <!--                <version>${reversion.spring-cloud-dependencies}</version>-->
            <!--                <scope>import</scope>-->
            <!--                <type>pom</type>-->
            <!--            </dependency>-->
            <dependency>
                <groupId>io.github.baifangkual</groupId>
                <artifactId>jlib-core</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${reversion.lombok}</version>
                <scope>provided</scope>
                <optional>true</optional>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${reversion.jackson}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${reversion.slf4j-api}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-simple</artifactId>
                <version>${reversion.slf4j-simple}</version>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>${reversion.jupiter-api}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.google.auto.service</groupId>
                <artifactId>auto-service</artifactId>
                <version>${reversion.auto-service}</version>
                <scope>provided</scope>
                <optional>true</optional>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <!-- central-publish 插件配置 -->
            <!-- 若不需推送至中央仓库，则不配置该插件 -->
            <plugin>
                <groupId>org.sonatype.central</groupId>
                <artifactId>central-publishing-maven-plugin</artifactId>
            </plugin>
            <!-- GPG签名配置 -->
            <!-- 若不需签名，则不配置该插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-gpg-plugin</artifactId>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!-- central-publish 插件配置 -->
                <plugin>
                    <groupId>org.sonatype.central</groupId>
                    <artifactId>central-publishing-maven-plugin</artifactId>
                    <version>${reversion.central-publishing-maven-plugin}</version>
                    <extensions>true</extensions>
                    <configuration>
                        <!-- 这里的serverId是之前在本地settings.xml中配置的<server><id>标签值 -->
                        <publishingServerId>central</publishingServerId>
                    </configuration>
                </plugin>
                <!-- GPG签名配置 -->
                <!-- 若需成功签名，则maven的settings.xml中关于该插件还有些配置 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-gpg-plugin</artifactId>
                    <version>${reversion.maven-gpg-plugin}</version>
                    <executions>
                        <execution>
                            <id>sign-artifacts</id>
                            <!-- 在install阶段进行签名 -->
                            <phase>install</phase>
                            <goals>
                                <goal>sign</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!-- source.jar 构建 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${reversion.maven-source-plugin}</version>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!-- javadoc.jar 构建 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${reversion.maven-javadoc-plugin}</version>
                    <executions>
                        <execution>
                            <id>attach-javadocs</id>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <failOnError>false</failOnError>
                        <additionalJOptions>
                            <!-- 禁止编译期javadoc生成告警及错误信息 -->
                            <additionalJOption>-Xdoclint:none</additionalJOption>
                            <!-- 解决javadoc在终端的输出乱码问题 -->
                            <additionalJOption>-J-Dfile.encoding=utf-8</additionalJOption>
                        </additionalJOptions>
                        <charset>UTF-8</charset><!-- utf-8读取文件 -->
                        <encoding>UTF-8</encoding><!-- utf-8进行编码代码 -->
                        <docencoding>UTF-8</docencoding><!-- utf-8进行编码文档 -->
                    </configuration>
                </plugin>
                <!-- spring boot 单体可执行jar打包插件 -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <!-- spring-boot-dependencies中定义了该版本，与dependencies版本相同 -->
                    <version>${reversion.spring-boot-dependencies}</version>
                    <executions>
                        <execution>
                            <id>repackage</id>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <!-- lombok即使下级模块pom中设置了optional-true还是会打包进单体可执行jar，需在此手动排除,
                         其他依赖项若scope为provided或optional为true则不会打包进单体可执行jar，
                         部分spring的jar该插件有专有设置，也不会打包进单体可执行jar-->
                        <excludes>
                            <exclude>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                            </exclude>
                        </excludes>
                        <!-- 默认打包行为会把打包jar默认名字顶掉，遂在此设置单体可执行jar的打包名称，设置为fatjar后缀 -->
                        <!-- 经测试，在引用artifactId和version等值时，不携带project前缀会在maven高版本编译时发出告警，遂该处添加了project前缀 -->
                        <finalName>${project.artifactId}-${project.version}-fatjar</finalName>
                        <!-- 该插件在下级模块打包时还需配置 mainClass属性 -->
                    </configuration>
                </plugin>
                <!-- maven编译插件 开启 parameters -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${reversion.maven-compiler-plugin}</version>
                    <configuration>
                        <parameters>true</parameters>
                    </configuration>
                </plugin>
                <!-- maven resources插件，设置properties编码为project.build.sourceEncoding值-UTF8 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${reversion.maven-resources-plugin}</version>
                    <configuration>
                        <propertiesEncoding>${project.build.sourceEncoding}</propertiesEncoding>
                        <!-- 因为springboot单体可执行jar打包会使用默认占位符，遂该处关闭默认占位符配置并配置其他占位符 -->
                        <useDefaultDelimiters>false</useDefaultDelimiters>
                        <delimiters>
                            <delimiter>${reset.resource.delimiter}</delimiter>
                        </delimiters>
                    </configuration>
                </plugin>
                <!-- 非spring体系的另一种打包单体可执行jar的插件 下级模块需补充配置才可正确打包：mainClass属性 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${reversion.maven-shade-plugin}</version>
                    <configuration>
                        <keepDependenciesWithProvidedScope>true</keepDependenciesWithProvidedScope>
                        <!-- 要求不在项目根路径生成dependencyReduced-pom文件 -->
                        <createDependencyReducedPom>false</createDependencyReducedPom>
                        <finalName>${project.artifactId}-${project.version}-uberjar</finalName>
                        <filters>
                            <filter>
                                <!-- 对所有依赖应用过滤项 -->
                                <artifact>*:*</artifact>
                                <excludes>
                                    <!-- 排除jar校验签名 -->
                                    <exclude>META-INF/*.SF</exclude>
                                    <exclude>META-INF/*.DSA</exclude>
                                    <exclude>META-INF/*.RSA</exclude>
                                    <!-- 排除jdk9的模块机制声明，因为可能会影响反射 -->
                                    <exclude>module-info.class</exclude>
                                    <!-- 排除GraalVM在Native-image时所使用的aot.factories -->
                                    <exclude>META-INF/spring/aot.factories</exclude>
                                </excludes>
                            </filter>
                        </filters>
                    </configuration>
                    <dependencies>
                        <!-- 这里可能与下面Transformer中的org.springframework.boot.maven.PropertiesMergingResourceTransformer有关，
                        在该处声明的这个插件中有PropertiesMergingResourceTransformer这个实现-->
                        <dependency>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-maven-plugin</artifactId>
                            <version>${reversion.spring-boot-dependencies}</version>
                        </dependency>
                    </dependencies>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>shade</goal>
                            </goals>
                            <configuration>
                                <!-- 该shade插件可用的transformer在
                                https://maven.apache.org/plugins/maven-shade-plugin/examples/resource-transformers.html
                                 中有说明，分别发挥不同的作用，按需要导入-->
                                <transformers>
                                    <!-- 该Transformer是向jar中添加MANIFEST.MF文件的，该文件描述jar的基本信息，包括主启动类（如果有）等的信息。
                                    该插件在下级模块打包时还需追加配置transformer：
                                    org.apache.maven.plugins.shade.resource.ManifestResourceTransformer
                                    并且transformer标签内还需有子标签配置 mainClass属性 -->
                                    <transformer
                                            implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    </transformer>
                                    <!-- 负责java spi机制同名文件合并的 -->
                                    <transformer
                                            implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                    <!-- 负责将开源声明文件LICENSE、license.txt等文件内容合并的 -->
                                    <transformer
                                            implementation="org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer"/>
                                    <!-- 负责将通告声明文件NOTICE、notice.txt等文件内容合并的 -->
                                    <transformer
                                            implementation="org.apache.maven.plugins.shade.resource.ApacheNoticeResourceTransformer"/>
                                    <transformer
                                            implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                        <resource>META-INF/spring.handlers</resource>
                                    </transformer>
                                    <transformer
                                            implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                        <resource>META-INF/spring.schemas</resource>
                                    </transformer>
                                    <transformer
                                            implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                        <resource>
                                            META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports
                                        </resource>
                                    </transformer>
                                    <transformer
                                            implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                        <resource>
                                            META-INF/spring/org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration.imports
                                        </resource>
                                    </transformer>
                                    <transformer
                                            implementation="org.springframework.boot.maven.PropertiesMergingResourceTransformer">
                                        <resource>META-INF/spring.factories</resource>
                                    </transformer>
                                </transformers>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- 仅定义该版本信息 该插件详细信息或下级模块使用该插件时完善，或该处完善 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>${reversion.maven-assembly-plugin}</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

</project>